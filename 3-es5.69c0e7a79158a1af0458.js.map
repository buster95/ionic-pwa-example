{"version":3,"sources":["webpack:///src/app/features/home/settings/settings.page.html","webpack:///src/app/features/home/settings/settings.page.ts","webpack:///src/app/features/home/settings/settings-routing.module.ts","webpack:///src/app/features/home/settings/settings.module.ts"],"names":["SettingsPage","themesService","languagesService","themes","THEMES","theme$","languages","language$","version","event","setTheme$","detail","value","pipe","subscribe","setLanguage$","routes","path","component","SettingsPageRoutingModule","forChild","SettingsPageModule"],"mappings":"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","file":"3-es5.69c0e7a79158a1af0458.js","sourcesContent":["<ion-header *transloco=\"let t\" class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-back-button></ion-back-button>\n    </ion-buttons>\n    <ion-title>{{ t('settings') }}</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <div class=\"list-container\">\n    <ion-card>\n      <ion-list *transloco=\"let t\" lines=\"none\">\n        <ion-item>\n          <ion-icon name=\"moon-outline\" slot=\"start\"></ion-icon>\n          <ion-label>{{ t('.theme') }}</ion-label>\n          <ion-select\n            *ngrxLet=\"theme$ as theme\"\n            [value]=\"theme\"\n            (ionChange)=\"onChangeTheme($event)\"\n          >\n            <ion-select-option *ngFor=\"let theme of themes\" [value]=\"theme\">\n              {{ t('theme.' + theme) }}\n            </ion-select-option>\n          </ion-select>\n        </ion-item>\n        <ion-item>\n          <ion-icon name=\"language-outline\" slot=\"start\"></ion-icon>\n          <ion-label>{{ t('languages') }}</ion-label>\n          <ion-select\n            *ngrxLet=\"language$ as language\"\n            [value]=\"language\"\n            (ionChange)=\"onChangeLanguage($event)\"\n          >\n            <ion-select-option\n              *ngFor=\"let language of languages | keyvalue\"\n              [value]=\"language.key\"\n              >{{ language.value }}</ion-select-option\n            >\n          </ion-select>\n        </ion-item>\n        <ion-item>\n          <ion-icon name=\"information-outline\" slot=\"start\"></ion-icon>\n          <ion-label>{{ t('version') }}</ion-label>\n          <ion-note slot=\"end\">{{ version }}</ion-note>\n        </ion-item>\n        <ion-item\n          href=\"https://github.com/seanwu1105/moment-pwa/discussions\"\n          target=\"_blank\"\n        >\n          <ion-icon name=\"help-outline\" slot=\"start\"></ion-icon>\n          <ion-label>{{ t('help') }}</ion-label>\n          <ion-icon name=\"logo-github\" slot=\"end\"></ion-icon>\n        </ion-item>\n        <ion-item\n          href=\"https://github.com/seanwu1105/moment-pwa/issues\"\n          target=\"_blank\"\n        >\n          <ion-icon name=\"bug-outline\" slot=\"start\"></ion-icon>\n          <ion-label>{{ t('issueReport') }}</ion-label>\n          <ion-icon name=\"logo-github\" slot=\"end\"></ion-icon>\n        </ion-item>\n      </ion-list>\n    </ion-card>\n  </div>\n</ion-content>\n","import { Component } from '@angular/core';\nimport { IonSelect } from '@ionic/angular';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { version } from '../../../../../package.json';\nimport { LanguagesService } from '../../../shared/languages/languages.service';\nimport { ThemesService } from '../../../shared/themes/themes.service';\nimport { languages } from '../../../shared/transloco/transloco-root.module';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.page.html',\n  styleUrls: ['./settings.page.scss'],\n})\nexport class SettingsPage {\n  readonly themes = ThemesService.THEMES;\n\n  readonly theme$ = this.themesService.theme$;\n\n  readonly languages = languages;\n\n  readonly language$ = this.languagesService.language$;\n\n  readonly version = version;\n\n  constructor(\n    private readonly themesService: ThemesService,\n    private readonly languagesService: LanguagesService\n  ) {}\n\n  onChangeTheme(event: Event) {\n    return this.themesService\n      .setTheme$((event as CustomEvent<IonSelect>).detail.value)\n      .pipe(untilDestroyed(this))\n      .subscribe();\n  }\n\n  onChangeLanguage(event: Event) {\n    return this.languagesService\n      .setLanguage$((event as CustomEvent<IonSelect>).detail.value)\n      .pipe(untilDestroyed(this))\n      .subscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SettingsPage } from './settings.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { SettingsPageRoutingModule } from './settings-routing.module';\nimport { SettingsPage } from './settings.page';\n\n@NgModule({\n  imports: [SharedModule, SettingsPageRoutingModule],\n  declarations: [SettingsPage],\n})\nexport class SettingsPageModule {}\n"]}